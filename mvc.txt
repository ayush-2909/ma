Practical No.2:
Building ASP.NET core MVC Application
Overview of MVC
The Model-View-Controller (MVC) architectural pattern separates an application into three main
components: the model, the view, and the controller. The ASP.NET MVC framework provides an alternative
to the ASP.NET Web Forms pattern for creating MVC-based Web applications. The ASP.NET MVC
framework is a lightweight, highly testable presentation framework that (as with Web Forms-based
applications) is integrated with existing ASP.NET features, such as master pages and membership- based
authentication. The MVC framework is defined in the System.Web.Mvc namespace and is a fundamental,
supported part of the System. Web namespace.
MVC is a standard design pattern that many developers are familiar with. Some types of Web applications
will benefit from the MVC framework. Others will continue to use the traditional ASP.NET application
pattern that is based on Web Forms and post backs. Other types of Web applications will combine the two
approaches; neither approach excludes the other.
The MVC framework includes the following components:-
Models :- Model objects are the parts of the application that implement the logic for the applications data
domain. Often, model objects retrieve and store model state in a database. For example, a Product object
might retrieve information from a database, operate on it, and then write updated information back to a
Products table in SQL Server.
Views :- Views are the components that display the applications user interface (UI). Typically, this UI is
created from the model data. An example would be an edit view of a Products table that displays text boxes,
drop-down lists, and check boxes based on the current state of a Products object.
Controllers :- Controllers are the components that handle user interaction, work with the model, and
ultimately select a view to render that displays UI. In an MVC application, the view only displays
information; the controller handles and responds to user input and interaction. For example, the controller
handles query-string values, and passes these values to the model, which in turn queries the database by using
the values.
1. Install.NetCoreSDK.
2. Create Folder MyMVC folder in d:drive or any other drive.
3. Open command prompt and perform the following operations. Command:-to create mvc project.
Command :dotnet new mvc–auth none
Output
4: go to controlleres folder and modify HomeController.cs file to match following
Output


Output
5. Create one notepad and save the file name as StockQuote.cs and make some changes.Save that file into
Models folder. Make some changes in Index.cshtml file. This file is being located at-
(“D:\MyMVC\Views\Home”
6. Again go to controllers folder and modify Home Controller.cd file to match following
Output
